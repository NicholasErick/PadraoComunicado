<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1.0"/>
    <title>Gerador e Editor de Relatórios</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <script type="module" src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js"></script>
    <style>
        body {
            font-family: 'Inter', Arial, Helvetica, sans-serif;
            --color-border: #e5e7eb; /* gray-200 */
            --color-bg-panel: #ffffff; /* white */
            --color-bg-page: #f9fafb;  /* gray-50 */
            --color-accent: #2563eb;   /* blue-600 */
            --color-accent-hover: #1d4ed8; /* blue-700 */
        }
        .control-panel::-webkit-scrollbar, .preview-area::-webkit-scrollbar { display: none; }
        .control-panel, .preview-area { -ms-overflow-style: none; scrollbar-width: none; }
        #email-preview-frame { width: 100%; height: 100%; border: none; border-radius: 0.5rem; background-color: white; }
        .loader { border: 4px solid #e2e8f0; border-radius: 50%; border-top: 4px solid var(--color-accent); width: 40px; height: 40px; animation: spin 1.5s linear infinite; margin: 20px auto; }
        @keyframes spin { 0% { transform: rotate(0deg);} 100% { transform: rotate(360deg);} }
        button:disabled { cursor: not-allowed; background-color: #93c5fd; opacity: 0.7; }
        .summary-card { background-color: #f8fafc; border: 1px solid #e2e8f0; border-radius: 0.5rem; padding: 1rem; }
        .toolbar-button { width: 2.25rem; height: 2.25rem; display: flex; align-items: center; justify-content: center; border: 1px solid transparent; border-radius: 0.375rem; transition: background-color 0.2s; color: #d1d5db; background-color: #1f2937; }
        .toolbar-button:hover { background-color: #374151; }
        .toolbar-button.active { background-color: var(--color-accent); color: white; }
        .recipient-tag { background-color: #e0e7ff; color: #3730a3; padding: 0.25rem 0.75rem; border-radius: 9999px; display: inline-flex; align-items: center; font-size: 0.875rem; font-weight: 500; margin: 0.25rem; }
        .recipient-tag button { margin-left: 0.5rem; color: #4338ca; background: none; border: none; cursor: pointer; }
        .recipient-tag button:hover { color: #312e81; }
        .resizable-img-wrapper { display: inline-block; resize: both; overflow: auto; border: 1px dashed #cbd5e1; border-radius: 4px; padding: 4px; max-width: 100%; }
        .resizable-img-wrapper > img { display: block; width: 100%; height: auto; }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <div class="flex h-screen bg-[var(--color-bg-page)]">
        <!-- PAINEL DE CONTROLE -->
        <aside class="control-panel w-full md:w-2/5 lg:w-1/3 h-screen flex flex-col bg-[var(--color-bg-panel)] border-r border-[var(--color-border)] p-6 overflow-y-auto">
            <header class="mb-6">
                <h1 class="text-2xl font-bold text-gray-900">Gerador e Editor de Relatórios</h1>
                <p class="mt-1 text-sm text-gray-600">Gere, edite e envie o relatório operacional consolidado até <b>D-1</b>.</p>
            </header>

            <!-- Passo 1: Geração -->
            <section class="mb-6">
                <h2 class="text-lg font-semibold text-gray-700 mb-3">1. Gerar Relatório</h2>
                <div class="p-4 bg-gray-50 rounded-lg shadow-sm border flex flex-col gap-4">
                    <div>
                        <label for="monthSelector" class="block text-sm font-medium text-slate-700">Mês de Referência</label>
                        <input type="month" id="monthSelector" class="mt-1 block w-full rounded-md border-slate-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                    </div>
                    <button id="generateBtn" class="w-full bg-[var(--color-accent)] text-white font-bold py-2.5 px-4 rounded-lg hover:bg-[var(--color-accent-hover)] flex items-center justify-center gap-2 transition-colors duration-300">
                        <ion-icon name="pulse-outline"></ion-icon>
                        Gerar Relatório
                    </button>
                </div>
            </section>
            
            <!-- Passo 2: Resumo -->
            <section id="summary-section" class="mb-6 hidden">
                <h2 class="text-lg font-semibold text-gray-700 mb-3">2. Resumo (D-1)</h2>
                <div id="summary-content" class="summary-card space-y-3 text-sm"></div>
            </section>

            <!-- Passo 3: Edição e Envio -->
            <section id="controls-section" class="flex-grow flex flex-col hidden">
                <h2 class="text-lg font-semibold text-gray-700 mb-3">3. Configurar e Enviar</h2>
                <div class="mb-4">
                    <label for="email-subject" class="block text-sm font-medium text-gray-700 mb-1">Assunto do E-mail</label>
                    <input type="text" id="email-subject" class="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 transition">
                </div>
                <div class="rounded-md bg-gray-50 p-4 border space-y-4">
                    <div>
                        <button id="manage-recipients-button" class="w-full bg-gray-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-gray-700">Gerenciar Destinatários (Para)</button>
                        <div id="fixed-recipients-display" class="mt-2 text-sm text-gray-700 text-center">Nenhum destinatário fixo carregado.</div>
                    </div>
                    <div>
                        <button id="add-cc-button" class="w-full bg-gray-500 text-white font-bold py-2 px-4 rounded-lg hover:bg-gray-600" disabled>Adicionar Cópia (Cc)</button>
                        <div id="cc-recipients-log" class="w-full text-xs text-gray-600 text-center mt-2"></div>
                    </div>
                    <div>
                        <label for="insert-image-input" class="w-full bg-teal-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-teal-700 cursor-pointer text-center block">Inserir Imagem no Corpo</label>
                        <input type="file" id="insert-image-input" class="hidden" accept="image/*">
                    </div>
                    <div>
                        <label for="attachment-input" class="block text-sm font-medium text-gray-700">Anexar Arquivo</label>
                        <input type="file" id="attachment-input" class="mt-1 w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"/>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Ajuste Manual do Status</label>
                        <div class="flex gap-2">
                            <button id="set-status-prazo" class="w-full bg-green-600 text-white font-bold py-2 px-2 rounded-lg hover:bg-green-700 text-xs">No Prazo</button>
                            <button id="set-status-atencao" class="w-full bg-yellow-500 text-white font-bold py-2 px-2 rounded-lg hover:bg-yellow-600 text-xs">Atenção</button>
                            <button id="set-status-critico" class="w-full bg-red-600 text-white font-bold py-2 px-2 rounded-lg hover:bg-red-700 text-xs">Crítico</button>
                        </div>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Ajuste Manual do Desvio</label>
                        <div class="flex gap-2">
                            <button id="set-desvio-positivo" class="w-full bg-green-600 text-white font-bold py-2 px-2 rounded-lg hover:bg-green-700 text-xs flex items-center justify-center gap-1">▼ Positivo</button>
                            <button id="set-desvio-negativo" class="w-full bg-red-600 text-white font-bold py-2 px-2 rounded-lg hover:bg-red-700 text-xs flex items-center justify-center gap-1">▲ Negativo</button>
                        </div>
                    </div>
                     <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Ajuste Manual da Média Móvel</label>
                        <div class="flex gap-2">
                            <button id="set-media-positivo" class="w-full bg-green-600 text-white font-bold py-2 px-2 rounded-lg hover:bg-green-700 text-xs">Cor Positiva</button>
                            <button id="set-media-negativo" class="w-full bg-red-600 text-white font-bold py-2 px-2 rounded-lg hover:bg-red-700 text-xs">Cor Negativa</button>
                        </div>
                    </div>
                </div>
                 <div class="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                    <p class="text-xs text-blue-800"><strong>Dica:</strong> Clique no texto da pré-visualização para editar. Selecione para formatar.</p>
                </div>

                <!-- Seção de Envio -->
                <div class="mt-auto pt-6">
                    <div class="rounded-md bg-gray-50 p-4 border">
                        <label for="test-mode-toggle" class="flex items-center cursor-pointer">
                            <input type="checkbox" id="test-mode-toggle" class="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                            <span class="ml-2 text-sm font-semibold text-gray-700">Ativar Modo de Teste</span>
                        </label>
                    </div>
                    <input type="hidden" id="power-automate-url" value="https://prod-76.westus.logic.azure.com:443/workflows/416859d347cd42e9bdae001d2f3caf04/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=gLZgIP7uqIjB0SYJlDCgLezyn_xpHr_prU_9roVsSgw">
                    
                    <div class="flex items-center gap-4 mt-4">
                        <button id="send-button" class="w-full bg-[var(--color-accent)] text-white font-bold py-2.5 px-4 rounded-lg hover:bg-[var(--color-accent-hover)] disabled:bg-gray-400">
                            Enviar Relatório
                        </button>
                    </div>
                    <div id="status-message" class="mt-3 text-sm font-medium text-center h-5"></div>
                </div>
            </section>
        </aside>

        <!-- ÁREA DE PRÉ-VISUALIZAÇÃO -->
        <main class="preview-area flex-grow h-screen p-6 overflow-y-auto flex items-center justify-center">
            <div id="loader-container" class="hidden text-center p-8">
                <div class="loader"></div>
                <p class="text-slate-500">Buscando e processando dados...</p>
            </div>
            <div id="preview-wrapper" class="w-full h-full max-w-4xl mx-auto shadow-lg relative">
                <iframe id="email-preview-frame"></iframe>
            </div>
        </main>
    </div>
    
    <!-- Floating Toolbar -->
    <div id="text-format-toolbar" class="absolute hidden bg-gray-900 rounded-lg shadow-xl p-1 flex items-center gap-1 z-50">
        <button data-command="bold" class="toolbar-button" title="Negrito"><svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M15.6 10.79c.97-.67 1.65-1.77 1.65-2.79 0-2.26-1.75-4-4-4H7v14h7.04c2.09 0 3.71-1.7 3.71-3.79 0-1.52-.86-2.82-2.15-3.42zM10 6.5h3c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-3v-3zm3.5 9H10v-3h3.5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5z"/></svg></button>
        <button data-command="italic" class="toolbar-button" title="Itálico"><svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M10 4v3h2.21l-3.42 8H6v3h8v-3h-2.21l3.42-8H18V4z"/></svg></button>
        <button data-command="underline" class="toolbar-button" title="Sublinhado"><svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M12 17c3.31 0 6-2.69 6-6V3h-2.5v8c0 1.93-1.57 3.5-3.5 3.5S8.5 12.93 8.5 11V3H6v8c0 3.31 2.69 6 6 6zm-7 2v2h14v-2H5z"/></svg></button>
    </div>

    <!-- Modals -->
    <div id="test-email-modal" class="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-md">
            <h3 class="text-lg font-bold text-gray-900">Enviar E-mail de Teste</h3>
            <p class="text-sm text-gray-600 mt-2">Digite o(s) e-mail(s) de destino para este teste, separados por vírgula.</p>
            <input type="text" id="test-email-input" class="w-full p-2 border border-gray-300 rounded-md mt-4" placeholder="email1@exemplo.com, email2@exemplo.com">
            <div class="mt-6 flex justify-end gap-3">
                <button id="cancel-test-email" class="bg-gray-200 text-gray-700 font-bold py-2 px-4 rounded-lg hover:bg-gray-300">Cancelar</button>
                <button id="confirm-test-email" class="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700">Enviar Teste</button>
            </div>
        </div>
    </div>
    <div id="cc-modal" class="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-lg">
            <h3 class="text-lg font-bold text-gray-900">Adicionar Destinatários em Cópia (Cc)</h3>
            <div class="mt-4 space-y-4">
                <div>
                    <input type="radio" id="cc-option-all" name="cc-option" value="all" checked class="h-4 w-4 text-blue-600">
                    <label for="cc-option-all" class="ml-2 text-sm text-gray-700">Incluir Todos os Grupos</label>
                </div>
                <div>
                    <input type="radio" id="cc-option-select" name="cc-option" value="select" class="h-4 w-4 text-blue-600">
                    <label for="cc-option-select" class="ml-2 text-sm text-gray-700">Selecionar Grupos Específicos</label>
                </div>
                <div id="cc-groups-container" class="hidden mt-4 p-3 border rounded-md max-h-48 overflow-y-auto space-y-2"></div>
            </div>
            <div class="mt-6 flex justify-end gap-3">
                <button id="cancel-cc" class="bg-gray-200 text-gray-700 font-bold py-2 px-4 rounded-lg hover:bg-gray-300">Cancelar</button>
                <button id="confirm-cc" class="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700">Confirmar</button>
            </div>
        </div>
    </div>
    <div id="confirm-send-modal" class="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-md">
            <h3 id="confirm-send-title" class="text-lg font-bold text-gray-900">Confirmar Envio</h3>
            <p id="confirm-send-message" class="text-sm text-gray-600 mt-2"></p>
            <div class="mt-6 flex justify-end gap-3">
                <button id="cancel-send-btn" class="bg-gray-200 text-gray-700 font-bold py-2 px-4 rounded-lg hover:bg-gray-300">Cancelar</button>
                <button id="confirm-send-btn" class="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700">Confirmar</button>
            </div>
        </div>
    </div>
    <div id="fixed-recipients-modal" class="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-2xl">
            <h3 class="text-lg font-bold text-gray-900">Gerenciar Destinatários Fixos (Para)</h3>
            <p class="text-sm text-gray-600 mt-2">Adicione, remova ou carregue a lista padrão de e-mails.</p>
            <div class="mt-4 p-3 border rounded-md min-h-[128px] max-h-64 overflow-y-auto bg-gray-50" id="recipient-tags-container"></div>
            <div class="mt-4">
                <label for="add-recipient-input" class="block text-sm font-medium text-gray-700">Adicionar novo e-mail</label>
                <div class="mt-1 flex gap-2">
                    <input type="email" id="add-recipient-input" class="flex-grow p-2 border rounded-md" placeholder="nome@exemplo.com">
                    <button id="add-recipient-btn" class="bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-700">Adicionar</button>
                </div>
                <p id="recipient-error-message" class="text-red-600 text-sm mt-1 h-4"></p>
            </div>
            <div class="mt-6 flex justify-between items-center">
                <button id="load-default-recipients-btn" class="text-sm text-blue-600 hover:underline">Carregar lista padrão</button>
                <div class="flex gap-3">
                    <button id="cancel-edit-recipients" class="bg-gray-200 text-gray-700 font-bold py-2 px-4 rounded-lg">Cancelar</button>
                    <button id="save-recipients-btn" class="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg">Salvar</button>
                </div>
            </div>
        </div>
    </div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    // --- STATE VARIABLES ---
    let processedData = null;
    let generatedHtml = '';
    let fixedRecipients = new Set();
    let recipients = { dinamicos: '' };
    let dynamicRecipientGroups = {};
    let tempFixedRecipients = new Set();

    // --- DOM ELEMENTS ---
    const monthSelector = document.getElementById('monthSelector');
    const generateBtn = document.getElementById('generateBtn');
    const emailSubjectInput = document.getElementById('email-subject');
    const previewFrame = document.getElementById('email-preview-frame');
    const controlsSection = document.getElementById('controls-section');
    const loaderContainer = document.getElementById('loader-container');
    const previewWrapper = document.getElementById('preview-wrapper');
    const statusMessage = document.getElementById('status-message');
    const summarySection = document.getElementById('summary-section');
    const summaryContent = document.getElementById('summary-content');
    const toolbar = document.getElementById('text-format-toolbar');
    const manageRecipientsButton = document.getElementById('manage-recipients-button');
    const addCcButton = document.getElementById('add-cc-button');
    const fixedRecipientsDisplay = document.getElementById('fixed-recipients-display');
    const ccRecipientsLog = document.getElementById('cc-recipients-log');
    const attachmentInput = document.getElementById('attachment-input');
    const testModeToggle = document.getElementById('test-mode-toggle');
    const insertImageInput = document.getElementById('insert-image-input');
    const sendButton = document.getElementById('send-button');
    const powerAutomateUrlInput = document.getElementById('power-automate-url');
    const setDesvioPositivoBtn = document.getElementById('set-desvio-positivo');
    const setDesvioNegativoBtn = document.getElementById('set-desvio-negativo');
    const setMediaPositivoBtn = document.getElementById('set-media-positivo');
    const setMediaNegativoBtn = document.getElementById('set-media-negativo');
    const setStatusPrazoBtn = document.getElementById('set-status-prazo');
    const setStatusAtencaoBtn = document.getElementById('set-status-atencao');
    const setStatusCriticoBtn = document.getElementById('set-status-critico');
    
    // Modal Elements
    const testEmailModal = document.getElementById('test-email-modal');
    const testEmailInput = document.getElementById('test-email-input');
    const ccModal = document.getElementById('cc-modal');
    const ccGroupsContainer = document.getElementById('cc-groups-container');
    const confirmSendModal = document.getElementById('confirm-send-modal');
    const confirmSendTitle = document.getElementById('confirm-send-title');
    const confirmSendMessage = document.getElementById('confirm-send-message');
    const fixedRecipientsModal = document.getElementById('fixed-recipients-modal');
    const recipientTagsContainer = document.getElementById('recipient-tags-container');
    const addRecipientInput = document.getElementById('add-recipient-input');
    const recipientErrorMessage = document.getElementById('recipient-error-message');

    // --- INITIAL SETUP ---
    const now = new Date();
    const year = now.getFullYear();
    const month = (now.getMonth() + 1).toString().padStart(2, '0');
    monthSelector.value = `${year}-${month}`;
    previewFrame.srcdoc = `<body style="font-family: Inter, sans-serif; display: flex; align-items: center; justify-content: center; height: 100%; color: #9ca3af; text-align: center; padding: 2rem;">Selecione um mês e clique em "Gerar Relatório" para começar.</body>`;
    carregarDadosDinamicos();

    // --- FORMATTERS ---
    const fmtYMD = (date) => `${date.getUTCFullYear()}${String(date.getUTCMonth() + 1).padStart(2, '0')}${String(date.getUTCDate()).padStart(2, '0')}`;
    const fmtLocalDate = (d) => new Date(d).toLocaleDateString('pt-BR', { timeZone: 'UTC' });
    const fmtNumber = (n) => (n || 0).toLocaleString('pt-BR', { maximumFractionDigits: 0 });
    const fmtDecimal = (n) => (n || 0).toFixed(1).replace('.', ',');
    const getMonthName = (m) => new Date(2000, m - 1, 1).toLocaleString('pt-BR', { month: 'long' });
    
    // --- CORE FUNCTIONS ---
    async function fetchDataForPeriod(startDateString, endDateString) {
        const monitoriaApiUrl = "https://prod-150.westus.logic.azure.com:443/workflows/1b5be2e8224e463c88d3e3d5106c6f11/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=iCHhjHzarEHmHczUShFgq0r3_s7db0APVPgCb_EShzs";
        const ofensoresApiUrl = "https://prod-78.westus.logic.azure.com:443/workflows/a3a11286f63c4c8c94db3b776860c098/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=dS2TnIluCnuvv7RS8U7xWh4m-oeToHlfvdlIyz1gYWk";
        const startDate = new Date(startDateString);
        const endDate = new Date(endDateString);
        const nextDay = new Date(endDate); nextDay.setUTCDate(nextDay.getUTCDate() + 1);
        const monitoriaPayload = { idInicio: fmtYMD(startDate), idFim: fmtYMD(endDate) };
        const ofensoresPayload = { idInicio: fmtYMD(startDate), idFimProximoDia: fmtYMD(nextDay) };
        try {
            const [mRes, oRes] = await Promise.all([
                fetch(monitoriaApiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(monitoriaPayload) }),
                fetch(ofensoresApiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(ofensoresPayload) })
            ]);
            if (!mRes.ok) throw new Error(`API de Monitoria: ${mRes.statusText}`);
            if (!oRes.ok) throw new Error(`API de Ofensores: ${oRes.statusText}`);
            const monitoriaJson = await mRes.json();
            const ofensoresJson = await oRes.json();
            return { monitoria: monitoriaJson.monitoriaDoPeriodo || [], ofensores: ofensoresJson.ofensoresDoPeriodo || [] };
        } catch (e) {
            throw e;
        }
    }
    
    function processReportData(rawMonitoria, rawOfensores) {
        if (!rawMonitoria || rawMonitoria.length < 1) return null;
        rawMonitoria.sort((a, b) => a.cr9ff_id_monitoria.localeCompare(b.cr9ff_id_monitoria));
        const monitoria = rawMonitoria;
        const ultimoDiaD1 = monitoria[monitoria.length - 1];
        if (!ultimoDiaD1) return null;
        const limiteD1 = ultimoDiaD1.cr9ff_id_monitoria;
        const ofensores = rawOfensores.filter(o => (o.cr9ff_id_ofensordiario || '').split('-')[0] <= limiteD1);
        const movingAvg = [];
        for (let i = 0; i < monitoria.length; i++) {
            const start = Math.max(0, i - 6);
            const slice = monitoria.slice(start, i + 1);
            movingAvg.push(slice.reduce((acc, v) => acc + (v.cr9ff_incidentes_do_dia ?? 0), 0) / slice.length);
        }
        monitoria.forEach((d, i) => d.movingAverage = movingAvg[i]);
        const ultimoDia = monitoria[monitoria.length - 1];
        const ultimoDiaData = new Date(ultimoDia.cr9ff_data);
        const totalIncidentes = monitoria.reduce((s, d) => s + (d.cr9ff_incidentes_do_dia ?? 0), 0);
        const diasNoMes = new Date(ultimoDiaData.getUTCFullYear(), ultimoDiaData.getUTCMonth() + 1, 0).getUTCDate();
        const diasCorridos = ultimoDiaData.getUTCDate();
        const diasRestantes = diasNoMes - diasCorridos;
        const metaMensal = ultimoDia.cr9ff_metamensal ?? 0;
        const acumuladoReal = ultimoDia.cr9ff_acumulado_real ?? 0;
        const acumuladoMeta = ultimoDia.cr9ff_acumulado_meta ?? 0;
        const mediaDiariaAtual = totalIncidentes / monitoria.length;
        let metaDiariaNecessaria = (diasRestantes > 0 && (metaMensal - acumuladoReal) > 0) ? (metaMensal - acumuladoReal) / diasRestantes : 0;
        const projecaoFimDeMes = acumuladoReal + (mediaDiariaAtual * diasRestantes);
        let status = { text: 'No Prazo', color: '#16A34A' };
        const desvioPercentual = (acumuladoReal / (acumuladoMeta || 1)) - 1;
        if (desvioPercentual > 0.10) status = { text: 'Crítico', color: '#DC2626' };
        else if (desvioPercentual > 0.02) status = { text: 'Atenção', color: '#D97706' };
        const dailyPerformance = { incidentes_dia: ultimoDia.cr9ff_incidentes_do_dia, media_movel_7d: ultimoDia.movingAverage };
        const subcategoriaMap = new Map(), locationsMap = new Map();
        
        ofensores.forEach(o => {
            const freq = o.cr9ff_frequenciadia ?? 0;
            if (!freq) return;

            const subcategoria = o.cr9ff_subcategoria;
            if (subcategoria) {
                subcategoriaMap.set(subcategoria, (subcategoriaMap.get(subcategoria) || 0) + freq);
            }
            
            let location = o.cr9ff_localizao;
            if (location && location !== '(Localidade não atribuída)') {
                if (location.toUpperCase().includes('MATRIZ')) {
                    location = 'MATRIZ SENDAS';
                }
                locationsMap.set(location, (locationsMap.get(location) || 0) + freq);
            }
        });

        return {
            kpis: { meta_mensal: metaMensal, acumulado_real: acumuladoReal, acumulado_meta: acumuladoMeta, desvio_acumulado: acumuladoReal - acumuladoMeta, projecao_fim_mes: projecaoFimDeMes, status, meta_diaria_necessaria: metaDiariaNecessaria },
            dailyPerformance,
            topSubcategorias: Array.from(subcategoriaMap.entries()).map(([subcategoria, totalFreq]) => ({ subcategoria, totalFreq })).sort((a, b) => b.totalFreq - a.totalFreq).slice(0, 5),
            topLocations: Array.from(locationsMap.entries()).map(([local, totalFreq]) => ({ local, totalFreq })).sort((a, b) => b.totalFreq - a.totalFreq).slice(0, 5),
            lastDate: ultimoDiaData,
        };
    }

    function generateAnalysisText(data) {
        const { kpis } = data;
        const status = kpis.status.text.toLowerCase();
        const desvio = kpis.desvio_acumulado;
        const projecao = kpis.projecao_fim_mes;
        const meta = kpis.meta_mensal;
        const acumuladoMeta = kpis.acumulado_meta;

        let analysis = '';

        if (status.includes('crítico')) {
            analysis = `A situação atual é <strong>crítica</strong>. O desvio acumulado de <strong>${fmtNumber(desvio)}</strong> incidentes acima do limite esperado de <strong>${fmtNumber(acumuladoMeta)}</strong> para o dia nos coloca em uma trajetória de risco. A projeção indica que podemos encerrar o período com aproximadamente <strong>${fmtNumber(projecao)}</strong> incidentes, excedendo a meta mensal de <strong>${fmtNumber(meta)}</strong>. É fundamental focar nos principais ofensores listados abaixo para reverter essa tendência com urgência.`;
        } else if (status.includes('atenção')) {
            analysis = `O cenário exige <strong>atenção</strong>. Estamos com um desvio de <strong>${fmtNumber(desvio)}</strong> incidentes acima do limite esperado de <strong>${fmtNumber(acumuladoMeta)}</strong>, e a projeção de <strong>${fmtNumber(projecao)}</strong> incidentes nos aproxima perigosamente da meta mensal de <strong>${fmtNumber(meta)}</strong>. A análise dos ofensores abaixo é crucial para corrigir o curso e garantir o cumprimento do objetivo.`;
        } else { // No Prazo
            analysis = `O desempenho está <strong>dentro do esperado</strong>. Atualmente, estamos <strong>${fmtNumber(Math.abs(desvio))}</strong> incidentes abaixo do limite de <strong>${fmtNumber(acumuladoMeta)}</strong> para o dia, o que é um resultado positivo. A projeção indica um fechamento de mês com <strong>${fmtNumber(projecao)}</strong> incidentes, confortavelmente abaixo da meta de <strong>${fmtNumber(meta)}</strong>. O foco deve ser manter a performance e monitorar os ofensores para prevenir desvios.`;
        }

        return `<p style="font-size:14px;color:#475569;line-height:1.6;">${analysis}</p>`;
    }

    function generateEmailHtml(data, isEditable = false) {
        const { kpis, dailyPerformance, topSubcategorias, topLocations, lastDate } = data;
        const c = { bgPage: '#F6F8FB', panel: '#FFFFFF', text: '#0F172A', sub: '#475569', mute: '#64748B', line: '#E2E8F0', brand: '#2563EB', good: '#16A34A', warn: '#D97706', bad: '#DC2626' };
        const statusPill = { text: (kpis.status.text || '').toUpperCase(), fg: kpis.status.color, bg: kpis.status.text?.toLowerCase().includes('crít') ? '#FEE2E2' : kpis.status.text?.toLowerCase().includes('aten') ? '#FEF3C7' : '#DCFCE7' };
        const media7 = dailyPerformance.media_movel_7d || 0;
        const metaNec = kpis.meta_diaria_necessaria || 0;
        const utm = 'utm_source=email&utm_medium=relatorio&utm_campaign=diario_incidentes';
        
        const linkEficiencia = 'https://org52b6eb4e.crm.dynamics.com/main.aspx?appid=62d8343d-f79d-ef11-8a69-002248231794';
        const linkSNOW = `https://assai.service-now.com/now/nav/ui/classic/params/target/%24pa_dashboard.do%3Fsysparm_dashboard%3D47bb95491bc79ed04c086570f54bcb87%26sysparm_tab%3D3f75eab5fb286e509dd4fc96beefdc27%26sysparm_cancelable%3Dtrue%26sysparm_editable%3Dundefined%26sysparm_active_panel%3Dfalse&${utm}`;

        const editable = isEditable ? `contenteditable="true"` : '';
        const imageWrapperCSS = isEditable ? `.resizable-img-wrapper { display: inline-block; resize: both; overflow: auto; border: 1px dashed #cbd5e1; border-radius: 4px; padding: 4px; max-width: 100%; } .resizable-img-wrapper > img { display: block; width: 100%; height: auto; }` : '';

        const kpiCardsHtml = `
            <tr><td style="padding:0 24px 24px;">
                <table role="presentation" width="100%" cellpadding="0" cellspacing="0">
                    <tr>
                        <td width="50%" style="padding:4px;"><table role="presentation" width="100%" style="border:1px solid ${c.line}; border-radius:8px; background-color:#F8FAFC; height: 90px;"><tr><td align="center" style="padding:12px;"><div style="font-size:13px; color:${c.sub};">Acumulado Real</div><div ${editable} style="font-size:26px; font-weight:700; color:${c.text}; margin-top:6px;">${fmtNumber(kpis.acumulado_real)}</div></td></tr></table></td>
                        <td width="50%" style="padding:4px;"><table role="presentation" width="100%" style="border:1px solid ${c.line}; border-radius:8px; background-color:#F8FAFC; height: 90px;"><tr><td align="center" style="padding:12px;"><div style="font-size:13px; color:${c.sub};">Desvio vs Limite</div><div id="desvio-kpi-value" ${editable} style="font-size:26px; font-weight:700; color:${kpis.desvio_acumulado > 0 ? c.bad : c.good}; margin-top:6px;"><span id="desvio-kpi-arrow">${kpis.desvio_acumulado > 0 ? '▲' : '▼'}</span> ${fmtNumber(Math.abs(kpis.desvio_acumulado))}</div></td></tr></table></td>
                    </tr>
                    <tr>
                        <td width="50%" style="padding:4px;"><table role="presentation" width="100%" style="border:1px solid ${c.line}; border-radius:8px; background-color:#F8FAFC; height: 90px;"><tr><td align="center" style="padding:12px;"><div style="font-size:13px; color:${c.sub};">Projeção Fim de Mês</div><div ${editable} style="font-size:26px; font-weight:700; color:${kpis.projecao_fim_mes > kpis.meta_mensal ? c.bad : c.text}; margin-top:6px;">${fmtNumber(kpis.projecao_fim_mes)}</div><div style="font-size:11px; color:${c.mute};">Limite: <span ${editable}>${fmtNumber(kpis.meta_mensal)}</span></div></td></tr></table></td>
                        <td width="50%" style="padding:4px;"><table role="presentation" width="100%" style="border:1px solid ${c.line}; border-radius:8px; background-color:#F8FAFC; height: 90px;"><tr><td align="center" style="padding:12px;"><div style="font-size:13px; color:${c.sub};">Média Móvel</div><div id="media-kpi-value" ${editable} style="font-size:26px; font-weight:700; color:${media7 > metaNec ? c.bad : c.good}; margin-top:6px;">${fmtDecimal(media7)}</div><div style="font-size:11px; color:${c.mute};">Limite Diário: <span ${editable}>${fmtDecimal(metaNec)}</span></div></td></tr></table></td>
                    </tr>
                </table>
            </td></tr>`;

        const explanationsFooterHtml = `
            <tr><td style="padding:24px 28px 16px; background-color:${c.bgPage}; border-top:1px solid ${c.line};">
                <div ${editable}>
                    <h4 style="font-size:13px; font-weight:700; color:${c.text}; margin:0 0 12px 0;">Metodologia dos Indicadores</h4>
                    <p style="font-size:12px; color:${c.sub}; line-height:1.5; margin:0 0 8px 0;">
                        <strong>Status:</strong> Avalia o desvio percentual do Acumulado Real vs. o limite para o dia (>2% = Atenção, >10% = Crítico).
                    </p>
                    <p style="font-size:12px; color:${c.sub}; line-height:1.5; margin:0 0 8px 0;">
                        <strong>Projeção:</strong> Soma o Acumulado Real com a média de incidentes dos dias restantes do mês.
                    </p>
                     <p style="font-size:12px; color:${c.sub}; line-height:1.5; margin:0;">
                        <strong>Média Móvel:</strong> Média de incidentes dos últimos 7 dias, comparada com o Limite Diário necessário para atingir a meta mensal.
                    </p>
                </div>
            </td></tr>`;

        const footerHtml = `
            <tr><td style="padding:24px 28px; background-color:${c.bgPage}; border-top:1px solid ${c.line};">
                <table role="presentation" width="100%" cellpadding="0" cellspacing="0">
                    <tr>
                        <!-- Coluna da Esquerda: Links -->
                        <td valign="top" width="50%" style="padding-right: 10px;">
                            <div style="font-size:14px; font-weight:700; color:${c.text}; margin-bottom:12px;">Acesse as Soluções</div>
                            <div style="font-size:13px; margin-bottom: 8px;">
                                <a href="${linkEficiencia}" target="_blank" style="color:${c.brand}; text-decoration:none; font-weight:600;">🌐 Solução Web de Eficiência</a>
                            </div>
                            <div style="font-size:13px;">
                                <a href="${linkSNOW}" target="_blank" style="color:${c.brand}; text-decoration:none; font-weight:600;">🛠️ ServiceNow</a>
                            </div>
                        </td>
                        <!-- Coluna da Direita: Contato -->
                        <td valign="top" width="50%" style="padding-left: 10px;">
                            <div style="font-size:14px; font-weight:700; color:${c.text}; margin-bottom:12px;">Contato</div>
                            <div style="font-size:13px; color:${c.sub};">
                                <strong>Equipe:</strong> Eficiência das Operações de TI - Qualidade<br>
                                <strong>E-mail:</strong> <a href="mailto:ti.qualidade@assai.com.br" style="color:${c.brand}; text-decoration:none;">ti.qualidade@assai.com.br</a>
                            </div>
                        </td>
                    </tr>
                </table>
            </td></tr>
            ${explanationsFooterHtml}
            <!-- Linha Final: Disclaimer -->
            <tr><td style="background-color:${c.bgPage}; text-align:center; padding: 16px 28px; border-top: 1px solid #E2E8F0;">
                <p style="font-size:11px; color:${c.mute}; margin:0;">Este é um e-mail automático. Gerado em ${new Date().toLocaleString('pt-BR')}.</p>
            </td></tr>
        `;

        return `
        <!DOCTYPE html><html lang="pt-BR"><head><meta charset="UTF-8"><style>body{margin:0;padding:0;background-color:#F8F8F8;font-family:Arial,sans-serif;}[contenteditable]:focus{outline:2px solid #3b82f666 !important;border-radius:4px;}${imageWrapperCSS}</style></head>
        <body><table role="presentation" width="100%" style="background-color:${c.bgPage};margin:0;padding:24px 0;"><tr><td align="center" style="padding:0 16px;">
        <table role="presentation" width="600" style="max-width:600px;background-color:${c.panel};border-radius:12px;border:1px solid ${c.line};">
            <tr><td><img src="https://i.ibb.co/99gdLL2y/Capas-E-mails-1.png" width="600" alt="Banner" style="width:100%;display:block;"></td></tr>
            <tr><td style="padding:24px 28px 16px;"><table role="presentation" width="100%"><tr>
                <td valign="middle"><div ${editable} style="font-size:24px;font-weight:700;color:${c.text};">Relatório Operacional</div><div style="margin-top:6px;font-size:14px;color:${c.sub};">Dados consolidados até <span ${editable}>${fmtLocalDate(lastDate)}</span> (D-1)</div></td>
                <td valign="middle" align="right"><span id="status-pill" ${editable} style="font-size:11px;font-weight:700;color:${statusPill.fg};background-color:${statusPill.bg};padding:8px 12px;border-radius:999px;">${statusPill.text}</span></td>
            </tr></table></td></tr>
            ${kpiCardsHtml}
            <tr><td id="email-body-content" ${editable} style="padding:0 28px 24px;">
                ${generateAnalysisText(data)}
            </td></tr>
            <tr><td style="padding:0 28px 24px;"><table role="presentation" width="100%"><tr>
                <td valign="top" width="50%" style="padding-right:10px;">
                    <div ${editable} style="font-size:14px;font-weight:700;margin-bottom:12px;color:${c.text};">📍 Top 5 Localidades</div>
                    <table role="presentation" width="100%">${topLocations.map(item => `<tr><td style="padding:8px 0;border-bottom:1px solid ${c.line};font-size:12px;color:${c.sub};"><span ${editable}>${item.local||'(N/A)'}</span><strong ${editable} style="float:right;color:${c.text};">${fmtNumber(item.totalFreq)}</strong></td></tr>`).join('')}</table>
                </td>
                <td valign="top" width="50%" style="padding-left:10px;">
                    <div ${editable} style="font-size:14px;font-weight:700;margin-bottom:12px;color:${c.text};">📦 Top Ofensores</div>
                    <table role="presentation" width="100%">${topSubcategorias.map(item => `<tr><td style="padding:8px 0;border-bottom:1px solid ${c.line};font-size:12px;color:${c.sub};"><span ${editable}>${item.subcategoria}</span><strong ${editable} style="float:right;color:${c.text};">${fmtNumber(item.totalFreq)}</strong></td></tr>`).join('')}</table>
                </td>
            </tr></table></td></tr>
            ${footerHtml}
        </table></td></tr></table></body></html>`;
    }
    
    // --- MAIN WORKFLOW ---
    async function handleGenerateEmail() {
        const monthValue = monthSelector.value;
        if (!monthValue) { return showStatus('Por favor, selecione um mês.', 'error'); }

        generateBtn.disabled = true;
        [loaderContainer, controlsSection, summarySection].forEach(el => el.classList.add('hidden'));
        previewWrapper.classList.add('hidden');
        loaderContainer.classList.remove('hidden');
        statusMessage.textContent = '';
        previewFrame.srcdoc = '';

        try {
            const [year, month] = monthValue.split('-').map(Number);
            const startDate = new Date(Date.UTC(year, month - 1, 1));
            const endDate = new Date(Date.UTC(year, month, 0));
            const data = await fetchDataForPeriod(startDate.toISOString().slice(0, 10), endDate.toISOString().slice(0, 10));

            if (!data || !data.monitoria || data.monitoria.length < 1) { throw new Error("Dados insuficientes para gerar relatório D-1."); }

            processedData = processReportData(data.monitoria, data.ofensores);
            if (!processedData) { throw new Error("Falha ao processar os dados do relatório."); }

            generatedHtml = generateEmailHtml(processedData, true);
            
            previewFrame.srcdoc = generatedHtml;
            previewFrame.onload = setupIframeEditor;

            emailSubjectInput.value = `Status Incidentes (D-1) – ${fmtLocalDate(processedData.lastDate)} | ${processedData.kpis.status.text}`;
            
            displaySummary(processedData);
            [controlsSection, summarySection].forEach(el => el.classList.remove('hidden'));

        } catch (error) {
            console.error('Erro ao gerar relatório:', error);
            showStatus(`Erro: ${error.message}`, 'error');
            previewFrame.srcdoc = `<body style="font-family:Inter, sans-serif;display:flex;align-items:center;justify-content:center;height:100%;color:#be123c;text-align:center;padding:2rem;"><div><strong>Ocorreu um erro:</strong><br>${error.message}</div></body>`;
        } finally {
            generateBtn.disabled = false;
            loaderContainer.classList.add('hidden');
            previewWrapper.classList.remove('hidden');
        }
    }

    function displaySummary(pData) {
        const { kpis, dailyPerformance, lastDate } = pData;
        summaryContent.innerHTML = `
            <div class="flex justify-between items-center"><span class="font-semibold text-gray-600">Status do Mês:</span><span class="font-bold" style="color: ${kpis.status.color};">${kpis.status.text}</span></div>
            <div class="flex justify-between items-center"><span class="font-semibold text-gray-600">Acumulado (${fmtLocalDate(lastDate)}):</span><span class="font-bold text-gray-900">${fmtNumber(kpis.acumulado_real)}</span></div>
            <div class="flex justify-between items-center"><span class="font-semibold text-gray-600">Projeção Fim de Mês:</span><span class="font-bold text-gray-900">${fmtNumber(kpis.projecao_fim_mes)}</span></div>
            <div class="flex justify-between items-center border-t pt-3 mt-2 border-dashed"><span class="font-semibold text-gray-600">Incidentes (D-1):</span><span class="font-bold text-blue-600">${fmtNumber(dailyPerformance.incidentes_dia)}</span></div>`;
        summarySection.classList.remove('hidden');
    }

    // --- EDITOR & TOOLBAR FUNCTIONS ---
    function setupIframeEditor() {
        const doc = previewFrame.contentWindow.document;
        if (!doc) return;
        const hideToolbar = () => { if (!toolbar.matches(':hover')) toolbar.classList.add('hidden'); };
        doc.addEventListener('selectionchange', handleTextSelection);
        doc.addEventListener('blur', hideToolbar);
        doc.body.addEventListener('paste', handlePasteImageIntoEditor);
        doc.body.addEventListener('drop', handleDropImageIntoEditor);
        doc.body.addEventListener('dragover', (e) => e.preventDefault());
        document.addEventListener('click', (e) => { if (e.target.id !== 'email-preview-frame') hideToolbar(); });
    }
    function handleTextSelection() {
        const selection = previewFrame.contentWindow.getSelection();
        if (!selection || selection.isCollapsed) { return toolbar.classList.add('hidden'); }
        updateToolbarState();
        const range = selection.getRangeAt(0);
        const rect = range.getBoundingClientRect();
        const frameRect = previewFrame.getBoundingClientRect();
        toolbar.style.top = `${frameRect.top + rect.top - toolbar.offsetHeight - 8 + window.scrollY}px`;
        toolbar.style.left = `${frameRect.left + rect.left + (rect.width - toolbar.offsetWidth) / 2 + window.scrollX}px`;
        toolbar.classList.remove('hidden');
    }
    function updateToolbarState() {
        const doc = previewFrame.contentWindow.document;
        toolbar.querySelectorAll('button[data-command]').forEach(button => {
            button.classList.toggle('active', doc.queryCommandState(button.dataset.command));
        });
    }
    function handleToolbarClick(e) {
        const button = e.target.closest('button');
        if (!button) return;
        e.preventDefault();
        previewFrame.contentWindow.document.execCommand(button.dataset.command, false, null);
        updateToolbarState();
    }

    // --- KPI ADJUSTMENT ---
    function setDesvioStatus(isPositive) {
        const iFrameDoc = previewFrame.contentWindow.document;
        if (!iFrameDoc) return;
        const valueEl = iFrameDoc.getElementById('desvio-kpi-value');
        const arrowEl = iFrameDoc.getElementById('desvio-kpi-arrow');
        if (!valueEl || !arrowEl) return showStatus('Elemento do KPI de desvio não encontrado.', 'error');
        const colors = { good: '#16A34A', bad: '#DC2626' };
        arrowEl.textContent = isPositive ? '▼' : '▲';
        valueEl.style.color = isPositive ? colors.good : colors.bad;
    }

    function setMediaStatus(isPositive) {
        const iFrameDoc = previewFrame.contentWindow.document;
        if (!iFrameDoc) return;
        const valueEl = iFrameDoc.getElementById('media-kpi-value');
        if (!valueEl) return showStatus('Elemento do KPI de média móvel não encontrado.', 'error');
        const colors = { good: '#16A34A', bad: '#DC2626' };
        valueEl.style.color = isPositive ? colors.good : colors.bad;
    }

    function setStatusPill(statusType) {
        const iFrameDoc = previewFrame.contentWindow.document;
        if (!iFrameDoc) return;
        const pillEl = iFrameDoc.getElementById('status-pill');
        if (!pillEl) return showStatus('Elemento da tag de status não encontrado.', 'error');

        const statuses = {
            prazo: { text: 'NO PRAZO', fg: '#16A34A', bg: '#DCFCE7' },
            atencao: { text: 'ATENÇÃO', fg: '#D97706', bg: '#FEF3C7' },
            critico: { text: 'CRÍTICO', fg: '#DC2626', bg: '#FEE2E2' }
        };

        const selectedStatus = statuses[statusType];
        if (selectedStatus) {
            pillEl.textContent = selectedStatus.text;
            pillEl.style.color = selectedStatus.fg;
            pillEl.style.backgroundColor = selectedStatus.bg;
        }
    }

    // --- IMAGE INSERTION FUNCTIONS ---
    function fileToDataURL(file) { return new Promise((resolve, reject) => { const reader = new FileReader(); reader.onload = () => resolve(reader.result); reader.onerror = reject; reader.readAsDataURL(file); }); }
    function insertImageAsResizable(dataUrl, naturalWidth) {
        const iFrameDoc = previewFrame.contentWindow.document;
        const body = iFrameDoc.getElementById('email-body-content') || iFrameDoc.body;
        const wrapper = iFrameDoc.createElement('div');
        wrapper.className = 'resizable-img-wrapper';
        wrapper.contentEditable = 'false';
        wrapper.style.width = Math.min(naturalWidth || 480, 540) + 'px';
        const img = iFrameDoc.createElement('img');
        img.src = dataUrl;
        wrapper.appendChild(img);
        const sel = previewFrame.contentWindow.getSelection();
        if (sel && sel.rangeCount > 0 && body.contains(sel.getRangeAt(0).startContainer)) {
            const range = sel.getRangeAt(0);
            range.deleteContents();
            range.insertNode(wrapper);
        } else {
            body.appendChild(wrapper);
        }
    }
    async function handleImageFile(file) {
        if (!file || !file.type.startsWith('image/')) return;
        try {
            const dataUrl = await fileToDataURL(file);
            const imgObj = new Image();
            imgObj.onload = () => insertImageAsResizable(dataUrl, imgObj.naturalWidth);
            imgObj.src = dataUrl;
        } catch (error) {
            showStatus('Falha ao processar imagem.', 'error');
        }
    }
    function handlePasteImageIntoEditor(e) {
        const items = e.clipboardData?.items || [];
        for (const item of items) { if (item.type.startsWith('image/')) { e.preventDefault(); return handleImageFile(item.getAsFile()); } }
    }
    function handleDropImageIntoEditor(e) {
        e.preventDefault();
        const file = Array.from(e.dataTransfer?.files || []).find(f => f.type.startsWith('image/'));
        handleImageFile(file);
    }

    // --- RECIPIENT MANAGEMENT FUNCTIONS ---
    function openFixedRecipientsModal() { tempFixedRecipients = new Set(fixedRecipients); renderRecipientTags(); fixedRecipientsModal.classList.remove('hidden'); addRecipientInput.focus(); }
    function renderRecipientTags() {
        recipientTagsContainer.innerHTML = '';
        if (tempFixedRecipients.size === 0) { recipientTagsContainer.innerHTML = `<p class="text-gray-500 text-center p-4">Nenhum e-mail adicionado.</p>`; }
        else { tempFixedRecipients.forEach(email => createRecipientTag(email)); }
    }
    function createRecipientTag(email) {
        const tag = document.createElement('div');
        tag.className = 'recipient-tag';
        tag.innerHTML = `<span>${email}</span><button type="button" title="Remover">&times;</button>`;
        tag.querySelector('button').addEventListener('click', () => { tempFixedRecipients.delete(email); renderRecipientTags(); });
        if(recipientTagsContainer.querySelector('p')) { recipientTagsContainer.innerHTML = ''; }
        recipientTagsContainer.appendChild(tag);
    }
    function addRecipient() {
        const email = addRecipientInput.value.trim();
        recipientErrorMessage.textContent = '';
        if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) { return recipientErrorMessage.textContent = 'Formato de e-mail inválido.'; }
        if (tempFixedRecipients.has(email)) { return recipientErrorMessage.textContent = 'Este e-mail já foi adicionado.'; }
        tempFixedRecipients.add(email);
        createRecipientTag(email);
        addRecipientInput.value = '';
    }
    function saveFixedRecipients() { fixedRecipients = new Set(tempFixedRecipients); updateFixedRecipientsDisplay(); fixedRecipientsModal.classList.add('hidden'); }
    function updateFixedRecipientsDisplay() { fixedRecipientsDisplay.textContent = fixedRecipients.size > 0 ? `${fixedRecipients.size} destinatário(s) fixo(s) definido(s).` : 'Nenhum destinatário fixo definido.'; }
    function loadDefaultRecipients() {
        const defaultEmails = "mara.lassabia@assai.com.br; fernando.mazzei@assai.com.br; fabio.benevento@assai.com.br; nelson.alves@assai.com.br; eduardo.nader@assai.com.br; tiago.pichelli@assai.com.br; elcio.kamei@assai.com.br; felipe.nemeth@assai.com.br; laercio.junior@assai.com.br; raphael.fusco@assai.com.br; marilia.scatena@assai.com.br; dennys.araujo@assai.com.br; claudia.lima@assai.com.br; denis.paiotti@assai.com.br; fabricio.rosa@assai.com.br; gabriela.graciano@assai.com.br; daniel.ribeiro@assai.com.br; luis.ramalho@assai.com.br; silas.souza@assai.com.br; carlos.negron@assai.com.br; yam.trigueiro@assai.com.br; leonardo.filho@assai.com.br; paulo.ribeiro@assai.com.br; magno.silva@assai.com.br; francisco.neto@assai.com.br; washington.santos@assai.com.br; joao.filho2@assai.com.br; michele.silva2@assai.com.br; paulo.rodrigues@assai.com.br; elisabete.brandao@assai.com.br; luis.silva@assai.com.br; renato.yamamoto@assai.com.br; tiago.bello@assai.com.br; elaine.silva2@assai.com.br; marcela.silva2@assai.com.br; maria.dias@assai.com.br; renato.viana@assai.com.br; sandra.santos@assai.com.br; celso.motta@assai.com.br; gilberto.caray@assai.com.br; cassio.rodrigues@assai.com.br; ti.qualidade@assai.com.br".replace(/\s/g, '').split(';');
        tempFixedRecipients = new Set(defaultEmails.filter(Boolean));
        renderRecipientTags();
    }
    async function carregarDadosDinamicos() {
        addCcButton.textContent = 'Carregando grupos...';
        addCcButton.disabled = true;
        try {
            const response = await fetch('https://prod-128.westus.logic.azure.com:443/workflows/68f5fe80ae2442d4b53fac09e49bd949/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=zUqYbIMukdgoXCKNItXtAekGJbCCmmjMd9sLhTkXnNg', { method: 'POST' });
            if (!response.ok) throw new Error(`Falha na API: ${response.statusText}`);
            const data = await response.json();
            const { destinatarios } = data;
            if (!Array.isArray(destinatarios)) throw new Error("Resposta inválida da API.");
            destinatarios.forEach(d => { if (d.cr9ff_grupodeatribuicao && d.cr9ff_destinatarios) { dynamicRecipientGroups[d.cr9ff_grupodeatribuicao] = d.cr9ff_destinatarios; } });
            addCcButton.textContent = 'Adicionar Cópia (Cc)';
            addCcButton.disabled = false;
        } catch (error) {
            console.error('Erro ao carregar grupos:', error);
            addCcButton.textContent = 'Erro ao carregar grupos';
        }
    }
    function openCcModal() {
        ccGroupsContainer.innerHTML = '';
        Object.keys(dynamicRecipientGroups).forEach(groupName => {
            const div = document.createElement('div');
            div.innerHTML = `<label class="flex items-center"><input type="checkbox" value="${groupName}" class="h-4 w-4 rounded"><span class="ml-2 text-sm">${groupName}</span></label>`;
            ccGroupsContainer.appendChild(div);
        });
        ccModal.classList.remove('hidden');
    }
    function handleCcConfirm() {
        const option = document.querySelector('input[name="cc-option"]:checked').value;
        let ccEmails = new Set();
        if (option === 'all') {
            Object.values(dynamicRecipientGroups).forEach(emailString => emailString.split(';').forEach(email => ccEmails.add(email.trim())));
        } else {
            ccGroupsContainer.querySelectorAll('input:checked').forEach(cb => {
                if (dynamicRecipientGroups[cb.value]) { dynamicRecipientGroups[cb.value].split(';').forEach(email => ccEmails.add(email.trim())); }
            });
        }
        recipients.dinamicos = Array.from(ccEmails).filter(Boolean).join(';');
        updateCcLog();
        ccModal.classList.add('hidden');
    }
    function updateCcLog() {
        const count = recipients.dinamicos.split(';').filter(Boolean).length;
        ccRecipientsLog.innerHTML = count > 0 ? `<p class="font-semibold mt-2">${count} destinatário(s) em cópia adicionado(s).</p>` : '';
    }

    // --- SENDING FUNCTIONS ---
    function generateFinalHtml() {
        const doc = previewFrame.contentWindow.document.cloneNode(true);
        doc.querySelectorAll('[contenteditable]').forEach(el => el.removeAttribute('contenteditable'));
        doc.querySelectorAll('.resizable-img-wrapper').forEach(wrapper => {
            const img = wrapper.querySelector('img');
            if (img) {
                img.style.width = wrapper.style.width || 'auto';
                img.style.height = 'auto';
                img.style.maxWidth = '100%';
                wrapper.parentNode.replaceChild(img, wrapper);
            }
        });
        return `<!DOCTYPE html>${doc.documentElement.outerHTML}`;
    }
    function readFileAsBase64(file) { return new Promise((resolve, reject) => { const reader = new FileReader(); reader.onload = () => resolve(reader.result.split(',')[1]); reader.onerror = reject; reader.readAsDataURL(file); }); }
    function prepareSendConfirmation() {
        const isTestMode = testModeToggle.checked;
        const toCount = fixedRecipients.size;
        const ccCount = recipients.dinamicos.split(';').filter(Boolean).length;
        if (isTestMode) {
            confirmSendTitle.textContent = "Enviar E-mail de Teste";
            confirmSendMessage.textContent = "O modo de teste está ativo. Um modal aparecerá para você inserir os e-mails de teste. Deseja continuar?";
        } else {
            confirmSendTitle.textContent = "Confirmar Envio Oficial";
            confirmSendMessage.textContent = `Você está prestes a enviar este comunicado para ${toCount} destinatário(s) em 'Para' e ${ccCount} em 'Cópia'. Confirma a ação?`;
        }
        confirmSendModal.classList.remove('hidden');
        document.getElementById('confirm-send-btn').onclick = () => {
            confirmSendModal.classList.add('hidden');
            if (isTestMode) { testEmailModal.classList.remove('hidden'); testEmailInput.focus(); }
            else {
                if (fixedRecipients.size === 0) { return showStatus('Adicione ao menos um destinatário (Para).', 'error'); }
                executeSend(Array.from(fixedRecipients).join(';'), recipients.dinamicos);
            }
        };
    }
    async function executeSend(destinatariosPara, destinatariosCopia) {
        const url = powerAutomateUrlInput.value.trim();
        if (!url) { return showStatus('URL do Power Automate não configurada.', 'error'); }
        sendButton.disabled = true;
        showStatus('Enviando...', 'loading');
        try {
            const attachment = attachmentInput.files[0];
            const payload = {
                htmlParaEnviar: generateFinalHtml(),
                assuntoParaEnviar: emailSubjectInput.value,
                destinatariosFixos: destinatariosPara,
                destinatariosDinamicos: destinatariosCopia,
                attachmentName: attachment ? attachment.name : null,
                attachmentContent: attachment ? await readFileAsBase64(attachment) : null
            };
            const response = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
            if (!response.ok) { throw new Error(`Erro no envio: ${response.statusText}`); }
            showStatus('Comunicado enviado com sucesso!', 'success');
        } catch (error) {
            showStatus(`Falha no envio. ${error.message}`, 'error');
        } finally {
            sendButton.disabled = false;
        }
    }
    
    function showStatus(message, type = 'info') {
        statusMessage.textContent = message;
        statusMessage.className = 'mt-3 text-sm font-medium text-center h-5 ';
        switch(type) {
            case 'success': statusMessage.classList.add('text-green-600'); break;
            case 'error':   statusMessage.classList.add('text-red-600');   break;
            default:        statusMessage.classList.add('text-gray-600');
        }
        setTimeout(() => { statusMessage.textContent = ''; }, 4000);
    }
    
    // --- EVENT LISTENERS ---
    generateBtn.addEventListener('click', handleGenerateEmail);
    toolbar.addEventListener('mousedown', handleToolbarClick);
    manageRecipientsButton.addEventListener('click', openFixedRecipientsModal);
    addCcButton.addEventListener('click', openCcModal);
    insertImageInput.addEventListener('change', (e) => handleImageFile(e.target.files[0]));
    sendButton.addEventListener('click', prepareSendConfirmation);
    setDesvioPositivoBtn.addEventListener('click', () => setDesvioStatus(true));
    setDesvioNegativoBtn.addEventListener('click', () => setDesvioStatus(false));
    setMediaPositivoBtn.addEventListener('click', () => setMediaStatus(true));
    setMediaNegativoBtn.addEventListener('click', () => setMediaStatus(false));
    setStatusPrazoBtn.addEventListener('click', () => setStatusPill('prazo'));
    setStatusAtencaoBtn.addEventListener('click', () => setStatusPill('atencao'));
    setStatusCriticoBtn.addEventListener('click', () => setStatusPill('critico'));
    document.getElementById('cancel-test-email').addEventListener('click', () => testEmailModal.classList.add('hidden'));
    document.getElementById('confirm-test-email').addEventListener('click', () => {
        const testEmails = testEmailInput.value;
        if (testEmails) {
            executeSend(testEmails, '');
            testEmailModal.classList.add('hidden');
        } else {
            showStatus('Por favor, insira um e-mail de teste válido.', 'error');
        }
    });
    document.getElementById('cancel-cc').addEventListener('click', () => ccModal.classList.add('hidden'));
    document.getElementById('confirm-cc').addEventListener('click', handleCcConfirm);
    document.getElementById('cancel-send-btn').addEventListener('click', () => confirmSendModal.classList.add('hidden'));
    document.getElementById('cancel-edit-recipients').addEventListener('click', () => fixedRecipientsModal.classList.add('hidden'));
    document.getElementById('save-recipients-btn').addEventListener('click', saveFixedRecipients);
    document.getElementById('add-recipient-btn').addEventListener('click', addRecipient);
    addRecipientInput.addEventListener('keydown', (e) => { if (e.key === 'Enter') { e.preventDefault(); addRecipient(); } });
    document.getElementById('load-default-recipients-btn').addEventListener('click', loadDefaultRecipients);
    ccModal.querySelectorAll('input[name="cc-option"]').forEach(radio => {
        radio.addEventListener('change', (e) => ccGroupsContainer.classList.toggle('hidden', e.target.value !== 'select'));
    });
});
</script>
</body>
</html>
